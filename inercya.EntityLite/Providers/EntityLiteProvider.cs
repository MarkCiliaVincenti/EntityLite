/*
Copyright 2014 i-nercya intelligent software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using inercya.EntityLite.Builders;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Text;
using inercya.EntityLite.Extensions;
using System.Data;

namespace inercya.EntityLite.Providers
{
    public abstract class EntityLiteProvider : IEntityLiteProvider
    {

        protected DataService DataService { get; private set; }

        protected EntityLiteProvider(DataService dataService)
        {
            this.DataService = dataService;
        }

        public virtual string ParameterPrefix
        {
            get { return "@"; }
        }

        public virtual string StartQuote
        {
            get { return "\""; }
        }

        public virtual string EndQuote
        {
            get { return "\""; }
        }

        public virtual string DefaultSchema { get; set; }
       

        public virtual AutoGeneratedFieldFetchMode AutoGeneratedFieldFetchMode
        {
            get { return AutoGeneratedFieldFetchMode.ScalarReturnValue; }
        }

        public virtual string Concat(params string[] strs)
        {
            return ConcatByOperator(" || ", strs);
        }

        protected static string ConcatByFunction(string functionName, string[] strs)
        {
            return functionName + "(" + ConcatByOperator(", ", strs) + ")";
        }

        public virtual string SequenceVariable 
        { 
            get
            {
                return null;
            }
        }

        public abstract string GetNextValExpression(string fullSequenceName);

        public virtual string DualTable
        {
            get { return null; }
        }

        protected static string ConcatByOperator(string op, string[] strs)
        {
            if (strs == null) throw new ArgumentNullException(nameof(strs));
            StringBuilder sb = new StringBuilder();
            bool firstTime = true;
            foreach (var str in strs)
            {
                if (firstTime) firstTime = false;
                else sb.Append(op);
                sb.Append(str);
            }
            return sb.ToString();
        }

        protected static string GetLimitOffsetSelectQuery(AbstractQueryBuilder builder, DbCommand selectCommand, ref int paramIndex, int fromRowIndex, int toRowIndex)
        {
            if (builder == null) throw new ArgumentNullException(nameof(builder));
            StringBuilder commandText = new StringBuilder();
            builder.GetSelectQuery(selectCommand, ref paramIndex, commandText, 0);
            string limitParameterName;
            var limitParam = builder.CreateIn32Parameter(toRowIndex - fromRowIndex + 1, ref paramIndex, out limitParameterName);
            selectCommand.Parameters.Add(limitParam);
            string offsetParameterName;
            var offsetParam = builder.CreateIn32Parameter(fromRowIndex, ref paramIndex, out offsetParameterName);
            selectCommand.Parameters.Add(offsetParam);
            commandText.Append("\nLIMIT ").Append(limitParameterName).Append(" OFFSET ").Append(offsetParameterName);
            return commandText.ToString();
        }

        public virtual string GetPagedQuery(AbstractQueryBuilder builder, DbCommand selectCommand, ref int paramIndex, int fromRowIndex, int toRowIndex)
        {
            return GetLimitOffsetSelectQuery(builder, selectCommand, ref paramIndex, fromRowIndex, toRowIndex);
        }

        protected virtual DbCommand GeneratePlainInsertCommand(CommandBuilder commandBuilder, object entity)
        {
            if (commandBuilder == null) throw new ArgumentNullException(nameof(commandBuilder));
            var cmd = commandBuilder.DataService.DbProviderFactory.CreateCommand();
            StringBuilder commandText = new StringBuilder();
            commandBuilder.AppendInsertStatement(entity, cmd, commandText);
            cmd.CommandText = commandText.ToString();
            return cmd;
        }

        protected abstract void AppendGetAutoincrementField(StringBuilder commandText, EntityMetadata entityMetadata);


        protected virtual DbCommand GenerateInsertCommandWithAutogeneratedField(CommandBuilder commandBuilder, object entity, EntityMetadata entityMetadata)
        {
            if (commandBuilder == null) throw new ArgumentNullException(nameof(commandBuilder));
            var cmd = commandBuilder.DataService.DbProviderFactory.CreateCommand();
            StringBuilder commandText = new StringBuilder();
            commandBuilder.AppendInsertStatement(entity, cmd, commandText);
            AppendGetAutoincrementField(commandText, entityMetadata);
            cmd.CommandText = commandText.ToString();
            return cmd;
        }

        public virtual DbCommand GenerateInsertCommand(CommandBuilder commandBuilder, object entity)
        {
            if (entity == null) throw new ArgumentNullException(nameof(entity));
            var entityType = entity.GetType();
            var entityMetadata = entityType.GetEntityMetadata();
            if (entityMetadata.AutogeneratedFieldName == null)
            {
                return GeneratePlainInsertCommand(commandBuilder, entity);
            }
            else
            {
                return GenerateInsertCommandWithAutogeneratedField(commandBuilder, entity, entityMetadata);
            }
        }

        public virtual DbCommand CreateCommand()
        {
            return this.DataService.Connection.CreateCommand();
        }

        public virtual void SetProviderTypeToParameter(IDbDataParameter parameter, int providerType)
        {
            throw new NotImplementedException();
        }

    }
}
